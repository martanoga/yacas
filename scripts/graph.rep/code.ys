Graph(edges_IsList) <-- [
    Local(v, e, f, t);

    vertices := {};

    ForEach (e, edges) [
        If (IsList(e), e := Head(e));
        {f, t} := Tail(Listify(e));

        DestructiveAppend(vertices, f);
        DestructiveAppend(vertices, t);
    ];

    Graph(RemoveDuplicates(vertices), edges);
];

10 # IsGraph(Graph(vertices_IsList, edges_IsList)) <-- True;
20 # IsGraph(_x) <-- False;

Edges(Graph(vertices_IsList, edges_IsList)) <-- edges;
Vertices(Graph(vertices_IsList, edges_IsList)) <-- vertices;

TopologicalSort(A_IsSquareMatrix) <--
[
    Local(mark, n, L, visit);

    mark := ZeroVector(Length(A));
    L := {};

    dfs(A, n, mark, L) := [
        Check(mark[n] != 1, "TopologicalSort: cycle detected");
        If (mark[n] = 0, [
            Local(m, row);
            DestructiveReplace(mark, n, 1);
            row := A[n];
            For (m := 1, m <= Length(row), m++)
                If (row[m] != 0, dfs(A, m, mark, L));
            DestructiveReplace(mark, n, 2);
            DestructiveInsert(L, 1, n);
        ]);
    ];    

    n := Find(mark, 0);

    While (n > 0) [
        dfs(A, n, mark, L);
        n := Find(mark, 0);
    ];

    L;
];
